name: Semantic Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write
  packages: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web-ui/package-lock.json
    
    - name: Install dependencies
      run: |
        npm ci
        cd web-ui && npm ci
    
    - name: Build UI
      run: |
        cd web-ui
        npm run build
    
    - name: Build binaries
      run: |
        mkdir -p dist
        # Build for multiple platforms
        GOOS=darwin GOARCH=amd64 go build -o dist/orochi_darwin_amd64 ./cmd/orochi
        GOOS=darwin GOARCH=arm64 go build -o dist/orochi_darwin_arm64 ./cmd/orochi
        GOOS=linux GOARCH=amd64 go build -o dist/orochi_linux_amd64 ./cmd/orochi
        GOOS=linux GOARCH=arm64 go build -o dist/orochi_linux_arm64 ./cmd/orochi
        GOOS=windows GOARCH=amd64 go build -o dist/orochi_windows_amd64.exe ./cmd/orochi
    
    - name: Create archives
      run: |
        cd dist
        # Create tar.gz for Unix systems
        tar -czf orochi_darwin_amd64.tar.gz orochi_darwin_amd64
        tar -czf orochi_darwin_arm64.tar.gz orochi_darwin_arm64
        tar -czf orochi_linux_amd64.tar.gz orochi_linux_amd64
        tar -czf orochi_linux_arm64.tar.gz orochi_linux_arm64
        # Create zip for Windows
        zip orochi_windows_amd64.zip orochi_windows_amd64.exe
    
    - name: Semantic Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npx semantic-release