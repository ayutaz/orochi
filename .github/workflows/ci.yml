name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go: ['1.23']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
    
    - name: Set up Go build cache paths
      id: go-cache-paths
      shell: bash
      run: |
        echo "build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
        echo "mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
    
    - name: Cache Go dependencies
      uses: actions/cache@v4
      with:
        path: |
          ${{ steps.go-cache-paths.outputs.build }}
          ${{ steps.go-cache-paths.outputs.mod }}
        key: ${{ runner.os }}-go-${{ matrix.go }}-v2-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go }}-v2-
    
    - name: Get dependencies
      run: go mod download
    
    - name: Run tests
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          go test -v -race ./...
        else
          go test -v -race -coverprofile=coverage.out ./...
        fi
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go == '1.23'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.62.2
        args: --timeout=10m
    
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web-ui/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd web-ui
        npm ci
    
    - name: Check frontend formatting
      run: |
        cd web-ui
        npm run format:check
    
    - name: Check Go formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Go files are not formatted. Please run 'go fmt ./...'"
          gofmt -l .
          exit 1
        fi
    
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Build UI
      run: |
        cd web-ui
        npm ci
        npm run build
    
    - name: Build
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          go build -v -o orochi.exe ./cmd/orochi
        else
          go build -v -o orochi ./cmd/orochi
        fi
      shell: bash
    
    - name: List files
      run: ls -la
      shell: bash
    
    - name: Test binary
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          ./orochi.exe --version
        else
          ./orochi --version
        fi
      shell: bash
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: orochi-${{ matrix.os }}
        path: |
          orochi*
          !orochi*.go
        retention-days: 7