name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go: ['1.23']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Get dependencies
      run: go mod download
    
    - name: Run tests
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          go test -v -race ./...
        else
          go test -v -race -coverprofile=coverage.out ./...
        fi
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go == '1.23'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
    
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: v1.61
        args: --timeout=10m
    
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Build UI
      run: |
        cd web-ui
        npm ci
        npm run build
    
    - name: Build
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          go build -v -o orochi.exe ./cmd/orochi
        else
          go build -v -o orochi ./cmd/orochi
        fi
      shell: bash
    
    - name: List files
      run: ls -la
      shell: bash
    
    - name: Test binary
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          ./orochi.exe --version
        else
          ./orochi --version
        fi
      shell: bash